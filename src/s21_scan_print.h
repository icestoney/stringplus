#ifndef S21_SCAN_PRINT_H
#define S21_SCAN_PRINT_H

#include <stdarg.h>
#include <stdbool.h>
#include <stdlib.h>

#include "s21_string.h"

typedef struct {
  char c;  // + + Character
  bool d;  // + + Знаковое десятичное целое число | Знаковое десятичное целое
           // число |
  bool i;  // + + Знаковое десятичное целое число | Знаковое целое число (может
           // быть десятичным, восьмеричным или шестнадцатеричным) |
  bool e;  // + + Научная нотация (мантисса/экспонента) с использованием символа
           // e (вывод чисел должен совпадать с точностью до e-6) | Десятичное
           // число с плавающей точкой или научная нотация (мантисса/экспонента)
           // |
  bool E;  // + + Научная нотация (мантисса/экспонента) с использованием символа
           // Е | Десятичное число с плавающей точкой или научная нотация
           // (мантисса/экспонента) |
  bool f;  // + + Десятичное число с плавающей точкой | Десятичное число с
           // плавающей точкой или научная нотация (мантисса/экспонента) |
  bool g;  // + + Использует кратчайший из представлений десятичного числа |
           // Десятичное число с плавающей точкой или научная нотация
           // (мантисса/экспонента) |
  bool G;  // + + Использует кратчайший из представлений десятичного числа |
           // Десятичное число с плавающей точкой или научная нотация
           // (мантисса/экспонента) |
  bool o;  // + + Беззнаковое восьмеричное число | Беззнаковое восьмеричное
           // число |
  bool s;  // + + Строка символов | Строка символов |
  bool u;  // + + Беззнаковое десятичное целое число | Беззнаковое десятичное
           // целое число |
  bool x;  // + + Беззнаковое шестнадцатеричное целое число | Беззнаковое
           // шестнадцатеричное целое число (любые буквы) |
  bool X;  // + + Беззнаковое шестнадцатеричное целое число (заглавные буквы) |
           // Беззнаковое шестнадцатеричное целое число (любые буквы) |
  bool p;  // + + Адрес указателя | Адрес указателя |
  bool n;  // + + Количество символов, напечатанных до появления %n | Количество
           // символов, считанных до появления %n |
  bool h;  // (i, d, o, u, x и X) Аргумент интерпретируется как короткое int или
           // короткое int без знака (применяется только к целочисленным
           // спецификаторам: i, d, o, u, x и X). |
  bool l;  // (i, d, o, u, x и X) Аргумент интерпретируется как длинное int или
           // длинное int без знака для целочисленных спецификаторов (i, d, o,
           // u, x и X) и как широкий символ или строка широких символов для
           // спецификаторов c и s. |
  bool L;  // (e, E, f, g и G) Аргумент интерпретируется как длинный double
           // (применяется только к спецификаторам с плавающей точкой − e, E, f,
           // g и G). |
  bool procent;     // + + Символ % | Символ % |
  s21_size_t prec;  // + - width.PRECISION
  // s21_size_t numchars; // + + WIDTH.precision
  s21_size_t width;  // + + WIDTH.precision Длина выводимого аргумента
  bool prec_custom;  // + - Точность установлена вручную
  bool g_prec_started;  // + - Начали ли выводиться значащие цифры при флаге 'g,
                        // G'
  bool g_e_prec_low;  // + - При g, если в целой части цифр больше, чем
                      // точность, то выводить научную нотацию
  bool mode_show_dot;  // + - При использовании со спецификаторами o, x или X
                       // перед числом вставляется 0, 0x или 0X соответственно
                       // (для значений, отличных от нуля).
  // + При использовании с e, E и f "заставляет" записанный вывод содержать
  // десятичную точку, даже если за ней не последует никаких цифр.
  // + По умолчанию, если не следует никаких цифр, десятичная точка не
  // записывается.
  // + При использовании с g или G результат такой же, как и с e или E, но
  // конечные нули не удаляются. |
  bool minus;  // + - Выравнивание по левому краю в пределах заданной ширины
               // поля. Выравнивание по правому краю используется по умолчанию
               // (см. подспецификатор ширины). |
  bool plus;  // + - Заставляет явно указывать знак плюс или минус (+ или -)
              // даже для положительных чисел. По умолчанию только отрицательным
              // числам предшествует знак "-". |
  bool space;  // + - Если знак не будет выведен, перед значением вставляется
               // пробел. |
  bool zeroes;  // + +- Заполняет число слева нулями (0) вместо пробелов, где
                // указан спецификатор ширины (см. подспецификатор ширины). |
  bool sscanf;  // Это sscanf
  bool skip;    // Пропустить присваивание, т.к. *
  bool add_width;  //*.
  bool add_prec;   //.*
  short int s_i_temp;
  long int l_i_temp;
  int i_temp;
  s21_size_t args_number;
} options;

void parse_specs(const char **str, options *specs, va_list args);
void delete_last_zeroes(char *buf, s21_size_t *buf_len);
void reverse(char *buf);
bool is_delimit(const char ch);
int starts_with(const char *str, const char *substr);
int lower(int ch);

#endif